//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ermeX
{
    
    
    /// <summary>
    /// The ermeXSection Configuration Section.
    /// </summary>
    public partial class ermeXSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the ermeXSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ermeXSectionSectionName = "ermeXSection";
        
        /// <summary>
        /// Gets the ermeXSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public static global::ermeX.ermeXSection Instance
        {
            get
            {
                return ((global::ermeX.ermeXSection)(global::System.Configuration.ConfigurationManager.GetSection(global::ermeX.ermeXSection.ermeXSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ermeX.ermeXSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::ermeX.ermeXSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return true;
        }
        #endregion
        
        #region ComponentDefinition Property
        /// <summary>
        /// The XML name of the <see cref="ComponentDefinition"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ComponentDefinitionPropertyName = "componentDefinition";
        
        /// <summary>
        /// Gets or sets the ComponentDefinition.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The ComponentDefinition.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ermeX.ermeXSection.ComponentDefinitionPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::ermeX.ComponentElement ComponentDefinition
        {
            get
            {
                return ((global::ermeX.ComponentElement)(base[global::ermeX.ermeXSection.ComponentDefinitionPropertyName]));
            }
            set
            {
                base[global::ermeX.ermeXSection.ComponentDefinitionPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace ermeX
{
    
    
    /// <summary>
    /// The ComponentElement Configuration Element.
    /// </summary>
    public partial class ComponentElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return true;
        }
        #endregion
        
        #region ComponentId Property
        /// <summary>
        /// The XML name of the <see cref="ComponentId"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ComponentIdPropertyName = "componentId";
        
        /// <summary>
        /// Gets the unique identifier of the ermeX component in the ermeX network
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The unique identifier of the ermeX component in the ermeX network")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ermeX.ComponentElement.ComponentIdPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string ComponentId
        {
            get
            {
                return ((string)(base[global::ermeX.ComponentElement.ComponentIdPropertyName]));
            }
        }
        #endregion
        
        #region TcpPort Property
        /// <summary>
        /// The XML name of the <see cref="TcpPort"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string TcpPortPropertyName = "tcpPort";
        
        /// <summary>
        /// Gets tCP port the components listens to
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("TCP port the components listens to")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ermeX.ComponentElement.TcpPortPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual int TcpPort
        {
            get
            {
                return ((int)(base[global::ermeX.ComponentElement.TcpPortPropertyName]));
            }
        }
        #endregion
        
        #region MessagesExpirationDays Property
        /// <summary>
        /// The XML name of the <see cref="MessagesExpirationDays"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string MessagesExpirationDaysPropertyName = "messagesExpirationDays";
        
        /// <summary>
        /// Gets the days after a message is expired. 
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("the days after a message is expired. ")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ermeX.ComponentElement.MessagesExpirationDaysPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=31)]
        public virtual global::System.TimeSpan MessagesExpirationDays
        {
            get
            {
                return ((global::System.TimeSpan)(base[global::ermeX.ComponentElement.MessagesExpirationDaysPropertyName]));
            }
        }
        #endregion
        
        #region DiscoverSubscriptors Property
        /// <summary>
        /// The XML name of the <see cref="DiscoverSubscriptors"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DiscoverSubscriptorsPropertyName = "discoverSubscriptors";
        
        /// <summary>
        /// Gets indicates if the message subscriptor types should be discovered when the component is started
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("indicates if the message subscriptor types should be discovered when the componen" +
            "t is started")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ermeX.ComponentElement.DiscoverSubscriptorsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=true)]
        public virtual bool DiscoverSubscriptors
        {
            get
            {
                return ((bool)(base[global::ermeX.ComponentElement.DiscoverSubscriptorsPropertyName]));
            }
        }
        #endregion
        
        #region DiscoverServices Property
        /// <summary>
        /// The XML name of the <see cref="DiscoverServices"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DiscoverServicesPropertyName = "discoverServices";
        
        /// <summary>
        /// Gets indicates if the services should be discovered when the component is started
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("indicates if the services should be discovered when the component is started")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ermeX.ComponentElement.DiscoverServicesPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false, DefaultValue=true)]
        public virtual bool DiscoverServices
        {
            get
            {
                return ((bool)(base[global::ermeX.ComponentElement.DiscoverServicesPropertyName]));
            }
        }
        #endregion
        
        #region FriendComponent Property
        /// <summary>
        /// The XML name of the <see cref="FriendComponent"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string FriendComponentPropertyName = "friendComponent";
        
        /// <summary>
        /// Gets or sets the friend component settings. Its used to join to the network. Dont configure if this component is the first added and the others will join to it
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("the friend component settings. Its used to join to the network. Dont configure if" +
            " this component is the first added and the others will join to it")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ermeX.ComponentElement.FriendComponentPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::ermeX.FriendComponentElement FriendComponent
        {
            get
            {
                return ((global::ermeX.FriendComponentElement)(base[global::ermeX.ComponentElement.FriendComponentPropertyName]));
            }
            set
            {
                base[global::ermeX.ComponentElement.FriendComponentPropertyName] = value;
            }
        }
        #endregion
        
        #region Database Property
        /// <summary>
        /// The XML name of the <see cref="Database"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DatabasePropertyName = "database";
        
        /// <summary>
        /// Gets the Database.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Database.")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ermeX.ComponentElement.DatabasePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::ermeX.DatabaseElement Database
        {
            get
            {
                return ((global::ermeX.DatabaseElement)(base[global::ermeX.ComponentElement.DatabasePropertyName]));
            }
        }
        #endregion
    }
}
namespace ermeX
{
    
    
    /// <summary>
    /// the component to request join network. Only one is needed
    /// </summary>
    public partial class FriendComponentElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return true;
        }
        #endregion
        
        #region RemoteIp Property
        /// <summary>
        /// The XML name of the <see cref="RemoteIp"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string RemoteIpPropertyName = "remoteIp";
        
        /// <summary>
        /// Gets or sets the remote component IP
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("the remote component IP")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ermeX.FriendComponentElement.RemoteIpPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string RemoteIp
        {
            get
            {
                return ((string)(base[global::ermeX.FriendComponentElement.RemoteIpPropertyName]));
            }
            set
            {
                base[global::ermeX.FriendComponentElement.RemoteIpPropertyName] = value;
            }
        }
        #endregion
        
        #region RemoteTcpPort Property
        /// <summary>
        /// The XML name of the <see cref="RemoteTcpPort"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string RemoteTcpPortPropertyName = "remoteTcpPort";
        
        /// <summary>
        /// Gets or sets the remote component TcpPort
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("the remote component TcpPort")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ermeX.FriendComponentElement.RemoteTcpPortPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual int RemoteTcpPort
        {
            get
            {
                return ((int)(base[global::ermeX.FriendComponentElement.RemoteTcpPortPropertyName]));
            }
            set
            {
                base[global::ermeX.FriendComponentElement.RemoteTcpPortPropertyName] = value;
            }
        }
        #endregion
        
        #region RemoteComponentId Property
        /// <summary>
        /// The XML name of the <see cref="RemoteComponentId"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string RemoteComponentIdPropertyName = "remoteComponentId";
        
        /// <summary>
        /// Gets or sets the remote component id in the ermeX Network
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The remote component id in the ermeX Network")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ermeX.FriendComponentElement.RemoteComponentIdPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string RemoteComponentId
        {
            get
            {
                return ((string)(base[global::ermeX.FriendComponentElement.RemoteComponentIdPropertyName]));
            }
            set
            {
                base[global::ermeX.FriendComponentElement.RemoteComponentIdPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace ermeX
{
    
    
    /// <summary>
    /// The DatabaseElement Configuration Element.
    /// </summary>
    public partial class DatabaseElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return true;
        }
        #endregion
    }
}
namespace ermeX
{
    
    
    /// <summary>
    /// The PhisicalDatabaseElement Configuration Element.
    /// </summary>
    public partial class PhisicalDatabaseElement : global::ermeX.DatabaseElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return true;
        }
        #endregion
        
        #region ConnectionString Property
        /// <summary>
        /// The XML name of the <see cref="ConnectionString"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ConnectionStringPropertyName = "connectionString";
        
        /// <summary>
        /// Gets the connectionstring of the database
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("the connectionstring of the database")]
        [global::System.ComponentModel.ReadOnlyAttribute(true)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ermeX.PhisicalDatabaseElement.ConnectionStringPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string ConnectionString
        {
            get
            {
                return ((string)(base[global::ermeX.PhisicalDatabaseElement.ConnectionStringPropertyName]));
            }
        }
        #endregion
    }
}
namespace ermeX
{
    
    
    /// <summary>
    /// The SqlServerDatabaseElement Configuration Element.
    /// </summary>
    public partial class SqlServerDatabaseElement : global::ermeX.PhisicalDatabaseElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return true;
        }
        #endregion
    }
}
namespace ermeX
{
    
    
    /// <summary>
    /// The SqliteDatabaseElement Configuration Element.
    /// </summary>
    public partial class SqliteDatabaseElement : global::ermeX.PhisicalDatabaseElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return true;
        }
        #endregion
    }
}
namespace ermeX
{
    
    
    /// <summary>
    /// The InMemoryDatabaseElement Configuration Element.
    /// </summary>
    public partial class InMemoryDatabaseElement : global::ermeX.DatabaseElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return true;
        }
        #endregion
    }
}
